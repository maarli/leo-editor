.. rst3: filename: html\tutorial2.html

##########################
External Files and Clones
##########################

.. contents::
    :depth: 2

.. |br| raw:: html

   <br />

.. _`ask for help`: https://groups.google.com/forum/#!forum/leo-editor

Creating external files
+++++++++++++++++++++++

.. .. _`Intermediate Topics tutorial`: http://leoeditor.com/basics2.html
.. .. _`Using @auto and friends`: http://leoeditor.com/basics2.html#using-auto-nodes

Leo stores outline data on your file system in **.leo files**.

Rather than storing all your data in the .leo file, you may store parts of
your outline data in **external files**, files on your file system.

**@file nodes** create external files. @file nodes have headlines starting
with @file followed by a file name::

    @file leoNodes.py
    @file ../../notes.text

Leo reads external files automatically when you open Leo outline, and
writes all **dirty** (changed) external files when you save any Leo
outline.

When writing @file nodes, Leo adds **sentinel comments** to external files.
Sentinels embed Leo's outline structure into external files.

If you don't want sentinels in your sources, skip head to
`Using @auto and friends`_ in Leo's `Intermediate Topics tutorial`_.

Creating non-programming files with @all
****************************************

Use the **@all** directive for non-programming files. @all tells Leo to
write the **@file tree** (the @file node and all its descendants) to the
external file in **outline order**, the order in which the nodes appear in
the outline pane when all nodes are expanded.

Creating programming source files with @others
**********************************************

Now we come to the programming features that distinguish Leo from all other
programming environments. Please study this section carefully if you intend
to use Leo for programming. If you get stuck, please `ask for help`_
immediately.

The @others directive, and markup called section references (see below),
tell Leo how to create external files.

**Essential Terms**:

- A **section name** is any text of the form: << any text >>.
  (>> must not appear in "any text".)
- A **section definition node** is any node whose headline starts with a
  section name.
- A **section reference** is a section name that appears in body text.

Leo creates external files containing @others directives by writing the
*expansion* of the @file node. |br|
The **expansion** of *any* node is
then ode's body text after making these text **substitutions**:

1. Leo replaces @others with the *expansion* of all descendant nodes
   **except** section definition nodes. That's how @others got its name.

2. Leo replaces section references by the *expansion* of the body text of
   the corresponding section definition node.
   
Whitespace is significant before @others and section references. Leo adds
the leading whitespace appearing before each @others directive or section
reference to every line of their expansion. As a result, Leo can generate
external files even for Python.  The following cute trick works::

    if 1:
        << a section >>
    if 0:
        @others

**Notes**:

- Any node may contain a single @others directive. No node may contain more
  than one @others directive.

- Nodes that *aren't* section definition nodes are included in the expansion
  of the *nearest* ancestor node containing an @others directive.

- An **orphan node** is a descendant of an @file node not included in any
  substitution. Leo refuses to write external files containing orphan
  nodes. Instead, Leo writes the @file tree to the .leo file itself,
  thereby preserving all data.

**Example 1**: The body of the @file node for a typical Python module will
look something like::

    '''A docstring.'''
    << imports >>
    @others
    if __name__ == '__main__':
        main()
        
**Example 2**:  Here is a typical Python class definition in Leo::

    class MyClass:
        '''A docstring.'''
        @others

Using @auto
+++++++++++



Clones
++++++

..  .. index::
    ..  pair: Clone; Tutorial
    
A **clone** is a node that appears in more than one place in a Leo outline.
Clones are marked with a small red arrow in its icon box. 

All clones of a node are actually *the same node*, so any change to one
clone affects all clones. Inserting, moving or deleting any child of a
clone will change all other clones on the screen.
    
Clones are one of Leo's most powerful features.
Clones allow data to be stored in *arbitrarily many* places within an outline.

Please take a few moments to experiment with clones:

- Create a node whose headline is A.
- Ctrl-` (clone-node) clones node A.
- Type some text into the body of A.
- All clones of A now have the same body.
- Insert a node, say B, as a child of any of the A nodes.
- All the A nodes now have a B child.
- See what happens if you clone B.
- See what happens if you insert, delete or move nodes that are children of A.
- When you delete a node's penultimate clone,
  the last clone becomes a regular node again.

Views
+++++

..  .. index::
    ..  pair: Views; Tutorial

Using clones, you can create as many views of your data as you like.

Views gather data for bug fixes, design review or whatever.

To create a new view:

- Create an *ordinary* (non-cloned) node, to represent the view.
  Let's call this the **view node**.

- Clone the nodes from the outline that you want contained in the view.

- "Add" these clones to the view node by moving them so they become children
  of the view node.

- You can also add uncloned nodes to the view node.

It's particularly useful to create a new view for each programming task:

- Add clones of all nodes related to the task to the view node.

- Now you can work on nodes in a single place; the location of the original
  clones doesn't matter.

Summary
+++++++

- Leo creates external files by replacing @others and section references
  with their expansions.

