.. rst3: filename: html\basics2.html

##################################
Creating External Files and Clones
##################################

.. |br| raw:: html

   <br />

.. _`Leo's`: http://leoeditor.com/

This tutorial continues `Leo's`_ tutorial. It covers several intermediate
topics and should take less than an hour to complete.

.. contents::
    :depth: 4

Clones
++++++

..  .. index::
    ..  pair: Clone; Tutorial
    
A **clone** is a node that appears in more than one place in a Leo outline.
Clones are marked with a small red arrow in its icon box. 

All clones of a node are actually *the same node*, so any change to one
clone affects all clones. Inserting, moving or deleting any child of a
clone will change all other clones on the screen.
    
Clones are one of Leo's most powerful features.
Clones allow data to be stored in *arbitrarily many* places within an outline.

Please take a few moments to experiment with clones:

- Create a node whose headline is A.
- Ctrl-` (clone-node) clones node A.
- Type some text into the body of A.
- All clones of A now have the same body.
- Insert a node, say B, as a child of any of the A nodes.
- All the A nodes now have a B child.
- See what happens if you clone B.
- See what happens if you insert, delete or move nodes that are children of A.
- When you delete a node's penultimate clone,
  the last clone becomes a regular node again.

Views
+++++

..  .. index::
    ..  pair: Views; Tutorial

Using clones, you can create as many views of your data as you like.

Views gather data for bug fixes, design review or whatever.

To create a new view:

- Create an *ordinary* (non-cloned) node, to represent the view.
  Let's call this the **view node**.

- Clone the nodes from the outline that you want contained in the view.

- "Add" these clones to the view node by moving them so they become children
  of the view node.

- You can also add uncloned nodes to the view node.

It's particularly useful to create a new view for each programming task:

- Add clones of all nodes related to the task to the view node.

- Now you can work on nodes in a single place; the location of the original
  clones doesn't matter.

Creating documents with reStructuredText
++++++++++++++++++++++++++++++++++++++++

.. _`docutils`: http://docutils.sourceforge.net
.. _`LaTeX`: http://www.latex-project.org/
.. _`reStructuredText`: http://docutils.sourceforge.net/rst.html
.. _`Sphinx`: http://sphinx.pocoo.org/
.. _`this chapter`: http://leoeditor.com/rstplugin3.html
.. _`Leo's Users Guide`: http://leoeditor.com/leo_toc.html

The rst3 command converts an @rst tree to `reStructuredText`_ (rST) and sends
the result to `docutils`_ or `Sphinx`_ for further processing.

With this tool chain, you can easily create HTML, PDF, LaTeX and other
kinds of documents. All of Leo's documentation is written in Sphinx and
processed with the rst3 command to produce HTML files.

In "plain" rST, you denote sections by underlining heading names.
Reorganizing an document is tedious: you have to change the underlining
characters by hand.

In contrast, the rst3 command automatically creates rST sections from
headlines. Reorganizing your document is easy--just reorganize your @rst
tree. You don't have to change rST markup!

The rst3 command provides *many* other capabilities for power users. For
full details, see `this chapter`_ in `Leo's Users Guide`_.

Autocompletion
++++++++++++++

Start or stop autocompletions with Alt-1 (toggle-autocompleter)

Leo's autocompletion feature suggests **completions**, text may be valid in
a given point in source code. For example, suppose the cursor follows::

    os.path.os.st
    
The valid completions are all the members of Python's os.path module whose
names start with 'st'. The valid completions appear in a Tab in the Log
Pane.

Leo also shows completions. These completions assume that c is a commander,
g is the leoGlobals object and p is a position.

Summary
+++++++



