.. rst3: filename: html/abbreviations.html

###########################
Abbreviations and Templates
###########################

.. |br| raw:: html

   <br />
   
Leo supports versatile abbreviations and templating capabilities. For
example, you can type ``def;;``, and Leo will prompt you for a
function name, using the node name as a default, detect whether the
function needs a ``self`` parameter, ask for a list of parameters, and
expand you input (just ``"some_function"`` and ``"one, two, three=4"``
to something like::
    
    def some_function(one, two, three=4):
        """some_function - Return <|return|>
    
        :Parameters:
        - `one`: <|describe one|>
        - `two`: <|describe two|>
        - `three`: <|describe three|>
        """
    
        <|code|>

Leo selects the first placeholder, ``<|return|>`` so you can begin
typing in the right place. Hitting ``,,`` will select the next place
holder, and so on.

settings
++++++++

Here are the Leo settings which relate to abbreviations. See the
actual settings in leoSettings.leo for full details.

**@bool enable-abbreviations** = True

Enables or disables abbreviations. Typically you would enable
abbreviations in myLeoSettings.leo or in individual .leo files.
    
**@data global-abbreviations** & **@data abbreviations**

These define local and global abbreviations. Definitions in \@data
abbreviation nodes override definitions in \@data global-abbreviation
nodes. Typically you would define \@data abbreviation nodes in
myLeoSettings.leo. Comments lines (lines starting with '#') are
ignored. Non-comment lines should have the form::

    name=definition
    
**@string abbreviations-subst-start** = ``{|{`` |br|
**@string abbreviations-subst-end** = ``}|}``

If abbreviations-subst-start is something other than None, *and* \@bool
scripting-at-script-nodes = True, then substitutions will be made when
abbreviations are inserted. For example, if abbreviations-subst-start
is set to ``{|{`` and abbreviations-subst-end is set to ``}|}``, an
abbreviation like::
    
    date;;={|{import time;x=time.asctime()}|}
    
will expand to something like "Mon Aug 20 22:00:40 2012"

**Note**: abbreviations-subst-end has no effect if abbreviations-subst-start is None.
    
**@data abbreviations-subst-env**

If abbreviations-subst-start is set, the code in this node will be
executed (once only) when the outline is loaded, in an environment
which will be used for execution of substitutions in abbreviations.

For example, if this node contains ``import time``, an abbreviation
like::
    
    date;;={|{import time;x=time.asctime()}|}
    
can be written more simply as::
    
    date;;={|{x=time.asctime()}|}
    
The environment will contain ``c`` and ``g``, a dict called
``_values`` (see ask() and get() in @data abbreviations-subst-env),
and ``_abr``, the abbreviation being expanded.
    
**Note**: start lines with ``\:`` to preserve indentation.
    
**@string abbreviations-place-start** = ``<|`` |br|
**@string abbreviations-place-end** = ``|>``

These settings specify the start and end of a placeholder for template
expansions. For example, the ``<|`` and ``|>`` in::

    w;;=while <|condition|>:
    \:    <|code|>

This would expand with the ``<|condition|>`` selected, and ``,,``, if
that's an abbreviation linked to __NEXT_PLACEHOLDER, see \@@data
abbreviations examples, would select ``<|code|>``.

examples
++++++++

See the node ``@@data abbreviations examples`` in leoSettings.leo for
examples of advanced abbreviations with substitutions.

